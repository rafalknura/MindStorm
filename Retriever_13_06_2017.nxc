//README
// Przed u¿yciem trzeba wprowadziæ dane: r, R, a, prox
// mam nadzieje ¿e sie jakoœ powa¿nie nie waln¹³em w niczym, choæ na to s¹ nik³e szanse
// uruchomiæ na otwartej przestrzeni lub prostopadle do sciany lub na kursie kolizyjnym z obiektem wielkoœci kubka

task MoveFwd();
task MoveStop();
task ProxAlarm();

int Search(int Tab[], int R, int r, int a, int prox);
int Identify(int Tab[], int prox);
int gamma(int R, int r, int a, int prox, int i, int retang);

int WALL = 1;
int OBSTACLE =2;
int EMPTY = 3;

//wiem, to powinno byæ w strukturze, pewnie to ogarne potem ;)

int r = 1; //srednica kola (cm)
int R = 2; //srednica robota (liczona miedzy wewnetrznymi krawedziami kol, cm)
int a = 3; //dlugosc ramienia z czujnikiem (liczona od osi miedzy kolami do czujnika, w jednostkach czujnika)
int prox = 4; //odleglosc na ktora moze zblizyc sie robot zanim wpadnie na sciane, najlepiej optymalnie miedzy 0 a 20

int Tab[7];

int FAIL(void)
{
TextOut(0,0,"nieudana identyfikacja");
while(1);
}

int IfEmpty(int i, int prox)
{
  return (prox+(4*abs(i-3))-2);
}

int gamma(int R, int r, int a, int prox, int i, int retang) //wylicza kat obrotu kol, tak dobrany zeby robot obrocil sie o okreslona wartosc
{
  return ((R/r)*(acos((a+prox)/(a+prox+2+(i*4)))-retang));
}

int IfWall(int Tab[])
{
   if((abs(Tab[0]-Tab[6])<2)&&
      (abs(Tab[1]-Tab[5])<2)&&
      (abs(Tab[2]-Tab[4])<2)&&
      (abs(Tab[4]-Tab[3]-2)<2)) return 1;
   else return 0;
}

int IfObstacle(int Tab[], int prox)
{
   int i=0;
   for(i=0; i<7; i++)
   {
     if(Tab[i]<(IfEmpty(i, prox)-2)) return 1;
   }
   if(Tab[3]<(IfEmpty(3, prox))) return 1;
   else return 0;
}

int Search(int Tab[], int R, int r, int a, int prox)
{
  int i=0;
  int retang=0, angle;
  for(i=0; i<3; i++)
  {
     angle=gamma(R, r, a, prox, i, retang);
     RotateMotorExPID(OUT_AB, 50, angle, 50, 0, 0, 64, 32, 32);
     retang+=angle;
     Wait(1000);
     Tab[4+i]=SensorUS(IN_1);
  }
  RotateMotorExPID(OUT_AB, 50, retang, -50, 0,0,64,32,32);
  Wait(1000);
  Tab[3]=SensorUS(IN_1);
  retang=0;
  for(i=0; i<3; i++)
  {
     angle=gamma(R, r, a, prox, i, retang);
     RotateMotorExPID(OUT_AB, 50, angle, -50, 0, 0, 64, 32, 32);
     retang+=angle;
     Wait(1000);
     Tab[2-i]=SensorUS(IN_1);
  }
  RotateMotorExPID(OUT_AB, 50, retang, 50, 0,0,64,32,32);
  Wait(250);
  return 0;
}

int Identify(int Tab[], int prox)
{
  if(Tab[3]>prox)
  {
    int i;
    for(i=0; i<7; i++)
    {
       if(Tab[i]<IfEmpty(i, prox)) return OBSTACLE;
       else return EMPTY;
    }
  }
  else if(Tab[3]<(prox+1))
  {
    int i;
    if(IfWall(Tab)) return WALL;
    if(IfObstacle(Tab, prox)) return OBSTACLE;
    else return FAIL();
  }
}

task MoveFwd()
{
   //RotateMotorExPID(OUT_AB, 75, 1800, 0, true, true, 64, 32, 32);
   OnFwdSyncPID(OUT_AB, 75, 0, 64, 32, 32);
}

task ProxAlarm()
{
   int timer=0;
   while(timer<10)
   {
     if(SensorUS(IN_1)<prox) ExitTo(MoveStop);
     Wait(200);
     timer++;
   }
   ExitTo(MoveStop);
}

task MoveStop()
{
  OffEx(OUT_AB, RESET_ALL);
  Off(OUT_AB);
  Search(Tab, R, r, a, prox);
  int object=Identify(Tab, prox);
  if(object==WALL) TextOut(0,0,"znlazlem sciane");
  else if(object==OBSTACLE) TextOut(0,0,"trafilem na przeszkode");
  else if(object==EMPTY) TextOut(0,0,"nic nie znalazlem");
  Wait(2000);
}

task main()
{
  SetSensorUltrasonic(IN_1);
  int step=0;
  while(step<5)
  {
    Precedes(ProxAlarm, MoveFwd);
    step++;
  }
}
